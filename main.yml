AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EC2InstanceType:
    Type: String
    Default: t2.micro
  EC2AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub 'Internal Security group for ${AWS::StackName}'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: InstanceRole

  Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: 1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              wget: []
              unzip: []
              awslogs: []
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      Monitoring: true
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # send script output to /tmp so we can debug boot failures
          exec > /tmp/userdata.log 2>&1

          echo "Updating all packages..." >> /tmp/userdata.log
          yum -y update >> /tmp/userdata.log 2>&1

          echo "Installing CloudFormation helper scripts..." >> /tmp/userdata.log
          yum install -y aws-cfn-bootstrap >> /tmp/userdata.log 2>&1

          echo "Initializing CloudFormation resources..." >> /tmp/userdata.log
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource Instance >> /tmp/userdata.log 2>&1

          cat > /tmp/install_script.sh << EOF
            # START
            echo "Setting up NodeJS Environment" >> /tmp/userdata.log
            curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash >> /tmp/userdata.log 2>&1

            # Dot source the files to ensure that variables are available within the current shell
            . /home/ec2-user/.nvm/nvm.sh >> /tmp/userdata.log 2>&1
            . /home/ec2-user/.bashrc >> /tmp/userdata.log 2>&1

            echo "Installing Node.js..." >> /tmp/userdata.log
            nvm alias default v12.7.0 >> /tmp/userdata.log 2>&1
            nvm install v12.7.0 >> /tmp/userdata.log 2>&1
            nvm use v12.7.0 >> /tmp/userdata.log 2>&1

            echo "Downloading and setting up application..." >> /tmp/userdata.log
            wget https://github.com/ozcli/aws-bootstrap/archive/master.zip >> /tmp/userdata.log 2>&1
            unzip master.zip >> /tmp/userdata.log 2>&1
            mv aws-bootstrap-master app >> /tmp/userdata.log 2>&1

            echo "Creating log directory..." >> /tmp/userdata.log
            mkdir -p /home/ec2-user/app/logs >> /tmp/userdata.log 2>&1

            echo "Running server..." >> /tmp/userdata.log
            cd app >> /tmp/userdata.log 2>&1
            npm install >> /tmp/userdata.log 2>&1
            npm start >> /tmp/userdata.log 2>&1
          EOF

          chown ec2-user:ec2-user /tmp/install_script.sh && chmod a+x /tmp/install_script.sh >> /tmp/userdata.log 2>&1
          sleep 1; su - ec2-user -c "/tmp/install_script.sh" >> /tmp/userdata.log 2>&1

          echo "Sending signal to CloudFormation..." >> /tmp/userdata.log
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource Instance >> /tmp/userdata.log 2>&1

      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

Outputs:
  InstanceEndpoint:
    Description: The DNS name for the created instance
    Value: !Sub "http://${Instance.PublicDnsName}:8080"
    Export:
      Name: InstanceEndpoint
