UserData:
  Fn::Base64: !Sub |
    #!/bin/bash -xe

    # Log everything to /home/ec2-user/userdata.log
    exec > /home/ec2-user/userdata.log 2>&1

    echo "Updating all packages..."
    yum -y update

    echo "Installing CloudFormation helper scripts..."
    yum install -y aws-cfn-bootstrap

    echo "Installing AWS CLI..."
    yum install -y aws-cli

    # Retrieve GitHub token from SSM Parameter Store
    GITHUB_TOKEN=$(aws ssm get-parameter --name "/github/token" --with-decryption --region ${AWS::Region} --query "Parameter.Value" --output text)

    echo "Initializing CloudFormation resources..."
    /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource Instance

    echo "Creating install script..."
    cat > /tmp/install_script.sh << 'EOF'
    #!/bin/bash -xe

    # Send output to a separate log file for debugging
    exec > /home/ec2-user/install_script.log 2>&1

    echo "Setting up NodeJS Environment"

    # Install NVM
    curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash

    # Load NVM environment
    export NVM_DIR="/home/ec2-user/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

    echo "Installing Node.js"
    nvm install v12.7.0
    nvm alias default v12.7.0
    nvm use v12.7.0

    echo "Cloning application repository"
    git clone https://${GITHUB_TOKEN}@github.com/osalqu/IaC_Create_CloudFormation_Stack.git /home/ec2-user/app

    echo "Creating log directory"
    mkdir -p /home/ec2-user/app/logs

    echo "Installing dependencies and starting application"
    cd /home/ec2-user/app
    npm install
    npm start
    EOF

    # Ensure install script is owned by ec2-user and executable
    chown ec2-user:ec2-user /tmp/install_script.sh
    chmod a+x /tmp/install_script.sh

    # Run install script as ec2-user
    su - ec2-user -c "/tmp/install_script.sh"

    # Signal to CloudFormation that the instance is ready
    /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource Instance
